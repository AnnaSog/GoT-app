{"version":3,"sources":["services/gotService.js","components/spinner/spinner.js","components/errorMessage/index.js","components/errorMessage/errorMessage.js","components/randomChar/randomChar.js","components/randomChar/index.js","components/itemList/index.js","components/itemList/itemList.js","components/charDetails/index.js","components/charDetails/charDetails.js","components/pages/characterPage/index.js","components/pages/characterPage/characterPage.js","components/app/index.js","components/app/app.js","index.js"],"names":["GotService","_this","this","Object","classCallCheck","_transformCharacter","char","name","isSet","gender","born","died","culture","_apiBase","url","fetch","concat","res","ok","Error","status","json","getResource","map","id","_apiId","character","_transformBook","book","data","house","region","words","titles","overlord","ancestralWeapons","numberOfPages","publiser","released","Spinner","react_default","a","createElement","className","ErrorMessage","Fragment","src","alt","RandomChar","gotService","state","loading","error","onCharLoaded","setState","onError","err","updateChar","Math","floor","random","getCharacter","then","catch","timerId","setInterval","clearInterval","_this$state","errorMessage","components_errorMessage","spinner","components_spinner_spinner","content","randomChar_View","Component","View","_ref","ItemList","charList","_this2","getAllCharacters","arr","_this3","item","i","itemCount","props","key","onClick","onCharSelected","items","renderItems","CharDetails","prevProps","charId","_this$state$char","CharacterPage","selectedChar","Row","Col","md","components_itemList","components_charDetails","App","showRandomChar","toggleRandomChar","components_randomChar","Container","characterPage","ReactDOM","render","components_app","document","getElementById"],"mappings":"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","file":"static/js/main.57c06d2a.chunk.js","sourcesContent":["export default class GotService {\r\n    constructor(){\r\n        this._apiBase = 'https://www.anapioficeandfire.com/api'; //_ означат, что это статичные данные и др. разработчикам не следует его трогать\r\n    }\r\n    \r\n    async getResource(url){\r\n        const res = await fetch(`${this._apiBase}${url}`); //url - то, что польз. передает, напр.'/characters?page=5'\r\n\r\n        if (!res.ok){ \r\n            throw new Error(`Could not fetch ${url} status: ${res.status}`);\r\n        } //если статус результата будет не 200(ок), то в консоле отражится ошибка\r\n\r\n        return await res.json();\r\n    }\r\n\r\n    async getAllCharacters () {\r\n        const res = await this.getResource('/characters?page=5'); //?page=5 - дописан к осн.адр, для запроса к персонажам на стр.5\r\n        return res.map(this._transformCharacter);\r\n    }\r\n\r\n    async getCharacter(id = this._apiId){ //данные конкретного персонажа\r\n        const character = await this.getResource(`/characters/${id}`); //здесь мы получаем {}, ктр ниже подвержает трансформации\r\n        return this._transformCharacter(character);\r\n    }\r\n\r\n    async getAllBooks() {\r\n        const res = await this.getResource(`/books/`);\r\n        return res.map(this._transformBook);\r\n    }\r\n\r\n    async getBook(id){ \r\n        const book = await this.getResource(`/books/${id}`); //здесь мы получаем {}, ктр ниже подвержает трансформации\r\n        return this._transformBook(book);\r\n    }\r\n\r\n    async getAllhouses(){\r\n        return this.getResource(`/houses/`);\r\n    }\r\n\r\n    async gethouse(id){ \r\n        return this.getResource(`/houses/${id}`);\r\n    }\r\n\r\n    isSet(data) {  \r\n        if (data) { //если есть инфо о персонаже, то будет отражаться\r\n            return data\r\n        } else {\r\n            return 'no data' //если нет, то это сообщение\r\n        }\r\n    }\r\n\r\n    _transformCharacter = (char) => {\r\n        return {\r\n            name: this.isSet(char.name),\r\n            gender: this.isSet(char.gender),\r\n            born: this.isSet(char.born),\r\n            died: this.isSet(char.died), \r\n            culture: this.isSet(char.culture)\r\n        } \r\n    }\r\n\r\n    _transformHouses(house){\r\n        return{\r\n            name: house.name,\r\n            region: house.region,\r\n            words: house.words,\r\n            titles: house.titles,\r\n            overlord: house.overlord,\r\n            ancestralWeapons: house.ancestralWeapons \r\n        }\r\n    }\r\n\r\n    _transformBook(book){\r\n        return{\r\n            name: this.isSet(book.name),\r\n            numberOfPages: this.isSet(book.numberOfPages),\r\n            publiser: this.isSet(book.publiser),\r\n            released: this.isSet(book.released)\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport './spinner.css';\r\n\r\nconst Spinner = () =>{\r\n    return(\r\n        <div className=\"loadingio-spinner-spinner-iarc4ky3vvm\"><div className=\"ldio-2hevyehhoy4\">\r\n        <div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div>\r\n        </div></div>\r\n    )\r\n}\r\n\r\nexport default Spinner;\r\n\r\n\r\n","import ErrorMessage from \"./errorMessage\";\r\nexport default ErrorMessage;\r\n","import React from 'react';\r\nimport './errorMessage.css'\r\n\r\nconst ErrorMessage = () => {\r\n    return( \r\n        <>\r\n            <img src={process.env.PUBLIC_URL + '/img/START-ELSE.jpg'} alt='error'></img>\r\n            <span className='error'> Something goes wrong </span>\r\n        </>\r\n        \r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import React, {Component} from 'react';\nimport './randomChar.css';\nimport GotService from '../../services/gotService';\nimport Spinner from '../spinner/spinner';\nimport ErrorMessage from '../errorMessage';\n\nexport default class RandomChar extends Component {\n\n    gotService = new GotService();\n\n    componentDidMount(){  //появляется на стр\n        this.updateChar();  //когда на стр появится компонент RandomChar, то будет вызвана эта фун-ию с данными персонажа\n        this.timerId = setInterval(this.updateChar, 4000)\n    }\n\n    componentWillUnmount(){ //удаляется со стр\n        clearInterval(this.timerId)\n    }\n\n    state = {\n        char: {},   //заполнятся данными, ктр придут из сервера\n        loading: true,\n        error: false\n    }\n\n    onCharLoaded =(char) => {\n        this.setState({\n            char,        //изменные данные приходят из gotService и метода getCharacter(id)\n            loading: false //после загр. персонажа, спиннер перестает работать\n        })  \n    }\n\n    onError = (err) => {  //если прописывать через стрелочную фун-ию, то через bind не нужно привязывать к this \n        this.setState({\n            error: true,\n            loading: false\n        })\n    }\n\n    updateChar = () => { //обновляет персонажей на стр\n        const id = Math.floor(Math.random() * 140 +25); //floor -округляет, 140 +25 - рандомно персонажи от 25 до 140\n        this.gotService.getCharacter(id) //gotService- в нем ссылка на сервис, getCharacter(id) - этот метод должен получить персожана с определенным Id и возращает его уже в транформированном виде\n            .then(this.onCharLoaded)    //вернется промис с данными персонажа, ктр указали, изменяют state и уже изменный отражается в render()\n            .catch(this.onError)\n    }\n\n    render() {\n        const {char, loading, error}= this.state;\n\n        const errorMessage = error ? <ErrorMessage/> : null; //если error true, то выходит сообщение об ошибке\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error) ? <View char = {char}/> : null; //если нет загрузки или ошибки, то отраж. инфо о персонаже\n\n        return (  \n            <div className=\"random-block rounded\"> \n                {errorMessage}\n                {spinner}\n                {content}\n            </div>              \n        );\n    }\n}\n\n//настроиваем, чтобы спиннер отражался в блоке, а не отдельно\nconst View = ({char}) =>{\n    const {name, gender, born, died, culture} = char;\n\n    return(\n        <>\n            <h4>Random Character: <br></br> {name}</h4>\n            <ul className=\"list-group list-group-flush\">\n                <li className=\"list-group-item d-flex justify-content-between\">\n                    <span className=\"term\">Gender</span>\n                    <span>{gender}</span>\n                </li>\n                <li className=\"list-group-item d-flex justify-content-between\">\n                    <span className=\"term\">Born </span>\n                    <span>{born}</span>\n                </li>\n                <li className=\"list-group-item d-flex justify-content-between\">\n                    <span className=\"term\">Died </span>\n                    <span>{died}</span>\n                </li>\n                <li className=\"list-group-item d-flex justify-content-between\">\n                    <span className=\"term\">Culture </span>\n                    <span>{culture}</span>\n                </li>\n            </ul>\n        </>\n    )\n}","import RandomChar from './randomChar';\n\nexport default RandomChar;","import ItemList from './itemList';\n\nexport default ItemList;","import React, {Component} from 'react';\nimport './itemList.css';\n\nimport GotService from '../../services/gotService';\nimport Spinner from '../spinner/spinner';\nimport ErrorMessage from '../errorMessage';\n\n\nexport default class ItemList extends Component {\n\n    gotService = new GotService();\n\n    state = {         //состояние где будут отражаться персонажи\n        charList: null,\n        error: false\n    }\n\n    componentDidMount(){  //создается комп. ктр будет отражаться на стр\n        this.gotService.getAllCharacters() //отправляем запрос к сервису(API) к методу, где отр.все герои\n            .then( (charList) => {      //получаем промис с измененным сос-нием с пустого на список персонажей\n                this.setState({\n                    charList,\n                    error: false\n                });\n            })\n            .catch(() => {this.onError()});\n    }\n\n    componentDidCatch(){\n        this.setState({\n            charList: null,\n            error: true\n        })\n    }\n    onError(status){   //Как только компонент критически ломается, onError - это функционал, который обрабатывает эту ошибку.\n        this.setState({\n            charList: null,\n            error: true\n        })\n    }\n\n    renderItems(arr) {    //arr - из сервиса придет массив данных\n        return arr.map( (item, i) => {   //полученный [] переберем (с созданием нового) на item - каждый эл. и порядковый номер c 0 до 9\n            const { itemCount } = this.props;\n            return(                     //вернется имя персонажа и его номер\n                <li \n                    key={i}           //при создании нового элемента в реакте обязательно должен быть ключ\n                    className=\"list-group-item\"\n                    onClick = { () => this.props.onCharSelected(itemCount + i)} //при клике на имя высветится карточка этого персонажа с данными, 41 - 5 стр + ост порядковые номера с 0 до 9\n                    > \n                    {item.name}\n                </li>\n            )\n        })\n    }\n\n    render() {\n\n        const {charList} = this.state;  //render получает данные к состоянию, ктр будет меняться(при запросе будут приходить данные персонажей)\n\n        if(!charList){                  //если данных пока нет, то будет спиннер\n            return <Spinner/>\n        }\n\n        const items = this.renderItems(charList); //карточки с именами персонажей\n\n        return (\n            <ul className=\"item-list list-group\">\n                {items}\n            </ul>\n        );\n    }\n}","import CharDetails from './charDetails';\nexport default CharDetails;","import React, {Component} from 'react';\nimport './charDetails.css';\nimport GotService from '../../services/gotService';\n\nexport default class CharDetails extends Component { //блок по отражанию данных конкретного персонажа\n\n    gotService = new GotService();\n\n    state = {\n        char: null\n    }\n\n    componentDidMount(){   //хук по обращению к серверу и рендеру данных на стр\n        this.updateChar();\n    }\n\n    componentDidUpdate(prevProps){          //хук обновления\n        if(this.props.charId !== prevProps.charId){  //если текущее сос-ние не будет равен предыдущему\n            this.updateChar();                  //то только тогда будет обновляться сос-ние\n        }\n    }\n\n    updateChar() {     //фун-ию по появлению персонажа\n        const {charId} = this.props;  //получаем из state characterPage.js\n\n        if(!charId){  //если данных нет, то ничего не будем делать\n            return;\n        } \n\n\n        this.gotService.getCharacter(charId)  //отравляем запрос на сервис для получения id конкретного персонажа\n            .then( (char) => {                //получаем промис с объектом (с персонажем) \n                this.setState({char})       // вызываем метод по измененяю сос-ния и записываем туда полученный объект \n            })\n        // this.foo.bar = 0; //создано, чтобы настроить ошибку\n    }\n\n    render() {\n\n        if(!this.state.char){    //если персонаж не выбран, попросим польз. это сделать\n           return <span className = 'select-error'>Please select a character</span>\n        }\n\n        const {name, gender, born, died, culture} = this.state.char;\n\n        return (\n            <div className=\"char-details rounded\">\n                <h4>{name}</h4>\n                <ul className=\"list-group list-group-flush\">\n                    <li className=\"list-group-item d-flex justify-content-between\">\n                        <span className=\"term\">Gender</span>\n                        <span>{gender}</span>\n                    </li>\n                    <li className=\"list-group-item d-flex justify-content-between\">\n                        <span className=\"term\">Born</span>\n                        <span>{born}</span>\n                    </li>\n                    <li className=\"list-group-item d-flex justify-content-between\">\n                        <span className=\"term\">Died</span>\n                        <span>{died}</span>\n                    </li>\n                    <li className=\"list-group-item d-flex justify-content-between\">\n                        <span className=\"term\">Culture</span>\n                        <span>{culture}</span>\n                    </li>\n                </ul>\n            </div>\n           \n        );\n    }\n}","import CharacterPage from './characterPage'\r\nexport default CharacterPage;","import React, {Component} from 'react';\r\nimport {Col, Row} from 'reactstrap';\r\nimport ItemList from '../../itemList';\r\nimport CharDetails from '../../charDetails';\r\nimport ErrorMessage from '../../errorMessage';\r\n\r\nexport default class CharacterPage extends Component {\r\n\r\n    state = {\r\n        selectedChar: null,  //выбранный персонаж\r\n        error: false\r\n    }\r\n\r\n    onCharSelected = (id) => {     //при клике на персонажа его карточка будет отражаться в текущем сос-ии\r\n        this.setState({\r\n            selectedChar: id\r\n        })\r\n    }\r\n\r\n    componentDidCatch(){\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render(){\r\n\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return(\r\n            <Row>\r\n                <Col md='6'>\r\n                    <ItemList onCharSelected = {this.onCharSelected}\r\n                    itemCount={41}/>\r\n                </Col>\r\n                <Col md='6'>\r\n                    <CharDetails \r\n                        charId = {this.state.selectedChar}\r\n                        />\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}","import App from './app';\n\nexport default App;\n","import React, {Component} from 'react';\nimport {Col, Row, Container} from 'reactstrap';\nimport RandomChar from '../randomChar';\nimport CharacterPage from '../pages/characterPage'\nimport ErrorMessage from '../errorMessage';\n\nimport './app.css';\n\n\nexport default class App extends Component {\n\n    state = {\n        showRandomChar: true,\n        error: false\n    }\n\n    componentDidCatch(){\n        this.setState({\n            error: true\n        })\n    }\n\n    toggleRandomChar = () => {\n        this.setState((state) => {\n            return {\n                showRandomChar: !state.showRandomChar \n            }\n        });\n    }\n\n\n    render(){\n\n        if (this.state.error) {\n            return <ErrorMessage/>\n        }\n       \n        const char = this.state.showRandomChar ? <RandomChar/> : null; //RandomChar будет показан только при этих условиях, а не по умолчанию\n\n        return (\n            <> \n                <Container>\n                    <Row>\n                        <Col md='6'>\n                            {char}  \n                            <button className='random' onClick = {this.toggleRandomChar}>Toggle random character</button>\n                        </Col>\n                    </Row>\n                    <CharacterPage/>\n                </Container>\n            </>\n        );\n    }\n};\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}